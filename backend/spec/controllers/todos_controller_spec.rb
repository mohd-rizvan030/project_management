require 'rails_helper'
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe TodosController, type: :controller do
  def user_login
    user=FactoryGirl.create(:user)
    @u=User.where(email: 'test01@testing.com').first
    if(@u.blank?)
      @u=User.create(email: 'test01@testing.com', password: 'new1life', password_confirmation: 'new1life', is_admin: true)
    end
    @u.save
    sign_in @u
  end

  # This should return the minimal set of attributes required to create a valid
  # Todo. As you add validations to Todo, be sure to
  # adjust the attributes here as well.

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TodosController. Be sure to keep this updated too.

  describe "GET #index" do
    it "returns a success response" do
      user_login
      get :index
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Todo" do
        user_login
        project = FactoryGirl.create(:project)
        expect {
          post :create, params: {todo: { summary: "Test01", description: "des0101", project_id: project.id} }
        }.to change(Todo, :count).by(1)
      end
    end

    context "with invalid params" do
      it "does not create a todo" do
        user_login
        expect {
          post :create, params: {todo: { summary: "Test01", description: "des0101" } }
        }.to change(Todo, :count).by(0)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      it "updates the requested todo" do
        user_login
        project = FactoryGirl.create(:project)
        todo = Todo.create(summary: "Test1", project_id: project.id)
        put :update, params: {id: todo.id, todo: {summary: "Test2"}}
        expect(Todo.where(id: todo.id).first.summary).to be == "Test2"
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested todo" do
      user_login
      project = FactoryGirl.create(:project)
      todo = Todo.create(summary: "Test1", project_id: project.id)
      expect {
        delete :destroy, params: {id: todo.id}
      }.to change(Todo, :count).by(-1)
    end
  end
end
